import java.util.Arrays;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.stream.Collectors;

class Product {
    private String name;
    private String category;
    private double price;

    public Product(String name, String category, double price) {
        this.name = name;
        this.category = category;
        this.price = price;
    }

    public String getName() {
        return name;
    }

    public String getCategory() {
        return category;
    }

    public double getPrice() {
        return price;
    }
}

public class Main {
    public static void main(String[] args) {
        List<Product> products = Arrays.asList(
            new Product("Laptop", "Electronics", 75000),
            new Product("Smartphone", "Electronics", 50000),
            new Product("Table", "Furniture", 10000),
            new Product("Chair", "Furniture", 5000)
        );

        Map<String, Optional<Product>> mostExpensiveByCategory = products.stream()
            .collect(Collectors.groupingBy(
                Product::getCategory,
                Collectors.maxBy((p1, p2) -> Double.compare(p1.getPrice(), p2.getPrice()))
            ));

        double averagePrice = products.stream()
            .mapToDouble(Product::getPrice)
            .average()
            .orElse(0.0);

        System.out.println("Most Expensive Product per Category:");
        mostExpensiveByCategory.forEach((category, product) -> {
            product.ifPresent(p -> System.out.println(category + ": " + p.getName() + " (" + p.getPrice() + ")"));
        });

        System.out.println("\nAverage Price of All Products: " + averagePrice);
    }
}
